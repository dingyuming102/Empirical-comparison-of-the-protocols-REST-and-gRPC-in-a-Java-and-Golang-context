// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.16.0
// source: transaction.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SmallTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data int32 `protobuf:"varint,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SmallTransaction) Reset() {
	*x = SmallTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmallTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmallTransaction) ProtoMessage() {}

func (x *SmallTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmallTransaction.ProtoReflect.Descriptor instead.
func (*SmallTransaction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *SmallTransaction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SmallTransaction) GetData() int32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type MediumTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data [][]byte `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MediumTransaction) Reset() {
	*x = MediumTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediumTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediumTransaction) ProtoMessage() {}

func (x *MediumTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediumTransaction.ProtoReflect.Descriptor instead.
func (*MediumTransaction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *MediumTransaction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MediumTransaction) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type LargeTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Matrix []*LargeTransaction_Row `protobuf:"bytes,2,rep,name=matrix,proto3" json:"matrix,omitempty"`
}

func (x *LargeTransaction) Reset() {
	*x = LargeTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LargeTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LargeTransaction) ProtoMessage() {}

func (x *LargeTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LargeTransaction.ProtoReflect.Descriptor instead.
func (*LargeTransaction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *LargeTransaction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LargeTransaction) GetMatrix() []*LargeTransaction_Row {
	if x != nil {
		return x.Matrix
	}
	return nil
}

type LargeTransaction_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row []float64 `protobuf:"fixed64,1,rep,packed,name=row,proto3" json:"row,omitempty"`
}

func (x *LargeTransaction_Row) Reset() {
	*x = LargeTransaction_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LargeTransaction_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LargeTransaction_Row) ProtoMessage() {}

func (x *LargeTransaction_Row) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LargeTransaction_Row.ProtoReflect.Descriptor instead.
func (*LargeTransaction_Row) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{2, 0}
}

func (x *LargeTransaction_Row) GetRow() []float64 {
	if x != nil {
		return x.Row
	}
	return nil
}

var File_transaction_proto protoreflect.FileDescriptor

var file_transaction_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x10, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x11, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x6a, 0x0a, 0x10, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x77, 0x52,
	0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x1a, 0x17, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x03, 0x72, 0x6f, 0x77,
	0x32, 0x3e, 0x0a, 0x0a, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x47, 0x52, 0x50, 0x43, 0x12, 0x30,
	0x0a, 0x06, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x11, 0x2e, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x2e, 0x53, 0x6d,
	0x61, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x32, 0x49, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x52, 0x50, 0x43, 0x12, 0x3b,
	0x0a, 0x0f, 0x47, 0x72, 0x61, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0x46, 0x0a, 0x0c, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x4f, 0x70, 0x47, 0x52, 0x50, 0x43, 0x12, 0x36, 0x0a, 0x0a, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x2e, 0x4c,
	0x61, 0x72, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_proto_rawDescOnce sync.Once
	file_transaction_proto_rawDescData = file_transaction_proto_rawDesc
)

func file_transaction_proto_rawDescGZIP() []byte {
	file_transaction_proto_rawDescOnce.Do(func() {
		file_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_proto_rawDescData)
	})
	return file_transaction_proto_rawDescData
}

var file_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_transaction_proto_goTypes = []interface{}{
	(*SmallTransaction)(nil),     // 0: SmallTransaction
	(*MediumTransaction)(nil),    // 1: MediumTransaction
	(*LargeTransaction)(nil),     // 2: LargeTransaction
	(*LargeTransaction_Row)(nil), // 3: LargeTransaction.Row
}
var file_transaction_proto_depIdxs = []int32{
	3, // 0: LargeTransaction.matrix:type_name -> LargeTransaction.Row
	0, // 1: SquareGRPC.Square:input_type -> SmallTransaction
	1, // 2: FilterGRPC.GrayscaleFilter:input_type -> MediumTransaction
	2, // 3: MatrixOpGRPC.Multiplier:input_type -> LargeTransaction
	0, // 4: SquareGRPC.Square:output_type -> SmallTransaction
	1, // 5: FilterGRPC.GrayscaleFilter:output_type -> MediumTransaction
	2, // 6: MatrixOpGRPC.Multiplier:output_type -> LargeTransaction
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_transaction_proto_init() }
func file_transaction_proto_init() {
	if File_transaction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmallTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediumTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LargeTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LargeTransaction_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_transaction_proto_goTypes,
		DependencyIndexes: file_transaction_proto_depIdxs,
		MessageInfos:      file_transaction_proto_msgTypes,
	}.Build()
	File_transaction_proto = out.File
	file_transaction_proto_rawDesc = nil
	file_transaction_proto_goTypes = nil
	file_transaction_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SquareGRPCClient is the client API for SquareGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SquareGRPCClient interface {
	Square(ctx context.Context, in *SmallTransaction, opts ...grpc.CallOption) (*SmallTransaction, error)
}

type squareGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewSquareGRPCClient(cc grpc.ClientConnInterface) SquareGRPCClient {
	return &squareGRPCClient{cc}
}

func (c *squareGRPCClient) Square(ctx context.Context, in *SmallTransaction, opts ...grpc.CallOption) (*SmallTransaction, error) {
	out := new(SmallTransaction)
	err := c.cc.Invoke(ctx, "/SquareGRPC/Square", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SquareGRPCServer is the server API for SquareGRPC service.
type SquareGRPCServer interface {
	Square(context.Context, *SmallTransaction) (*SmallTransaction, error)
}

// UnimplementedSquareGRPCServer can be embedded to have forward compatible implementations.
type UnimplementedSquareGRPCServer struct {
}

func (*UnimplementedSquareGRPCServer) Square(context.Context, *SmallTransaction) (*SmallTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Square not implemented")
}

func RegisterSquareGRPCServer(s *grpc.Server, srv SquareGRPCServer) {
	s.RegisterService(&_SquareGRPC_serviceDesc, srv)
}

func _SquareGRPC_Square_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmallTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareGRPCServer).Square(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SquareGRPC/Square",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareGRPCServer).Square(ctx, req.(*SmallTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _SquareGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SquareGRPC",
	HandlerType: (*SquareGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Square",
			Handler:    _SquareGRPC_Square_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction.proto",
}

// FilterGRPCClient is the client API for FilterGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilterGRPCClient interface {
	GrayscaleFilter(ctx context.Context, in *MediumTransaction, opts ...grpc.CallOption) (*MediumTransaction, error)
}

type filterGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewFilterGRPCClient(cc grpc.ClientConnInterface) FilterGRPCClient {
	return &filterGRPCClient{cc}
}

func (c *filterGRPCClient) GrayscaleFilter(ctx context.Context, in *MediumTransaction, opts ...grpc.CallOption) (*MediumTransaction, error) {
	out := new(MediumTransaction)
	err := c.cc.Invoke(ctx, "/FilterGRPC/GrayscaleFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilterGRPCServer is the server API for FilterGRPC service.
type FilterGRPCServer interface {
	GrayscaleFilter(context.Context, *MediumTransaction) (*MediumTransaction, error)
}

// UnimplementedFilterGRPCServer can be embedded to have forward compatible implementations.
type UnimplementedFilterGRPCServer struct {
}

func (*UnimplementedFilterGRPCServer) GrayscaleFilter(context.Context, *MediumTransaction) (*MediumTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrayscaleFilter not implemented")
}

func RegisterFilterGRPCServer(s *grpc.Server, srv FilterGRPCServer) {
	s.RegisterService(&_FilterGRPC_serviceDesc, srv)
}

func _FilterGRPC_GrayscaleFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediumTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterGRPCServer).GrayscaleFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilterGRPC/GrayscaleFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterGRPCServer).GrayscaleFilter(ctx, req.(*MediumTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _FilterGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FilterGRPC",
	HandlerType: (*FilterGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrayscaleFilter",
			Handler:    _FilterGRPC_GrayscaleFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction.proto",
}

// MatrixOpGRPCClient is the client API for MatrixOpGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MatrixOpGRPCClient interface {
	Multiplier(ctx context.Context, opts ...grpc.CallOption) (MatrixOpGRPC_MultiplierClient, error)
}

type matrixOpGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMatrixOpGRPCClient(cc grpc.ClientConnInterface) MatrixOpGRPCClient {
	return &matrixOpGRPCClient{cc}
}

func (c *matrixOpGRPCClient) Multiplier(ctx context.Context, opts ...grpc.CallOption) (MatrixOpGRPC_MultiplierClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MatrixOpGRPC_serviceDesc.Streams[0], "/MatrixOpGRPC/Multiplier", opts...)
	if err != nil {
		return nil, err
	}
	x := &matrixOpGRPCMultiplierClient{stream}
	return x, nil
}

type MatrixOpGRPC_MultiplierClient interface {
	Send(*LargeTransaction) error
	Recv() (*LargeTransaction, error)
	grpc.ClientStream
}

type matrixOpGRPCMultiplierClient struct {
	grpc.ClientStream
}

func (x *matrixOpGRPCMultiplierClient) Send(m *LargeTransaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *matrixOpGRPCMultiplierClient) Recv() (*LargeTransaction, error) {
	m := new(LargeTransaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MatrixOpGRPCServer is the server API for MatrixOpGRPC service.
type MatrixOpGRPCServer interface {
	Multiplier(MatrixOpGRPC_MultiplierServer) error
}

// UnimplementedMatrixOpGRPCServer can be embedded to have forward compatible implementations.
type UnimplementedMatrixOpGRPCServer struct {
}

func (*UnimplementedMatrixOpGRPCServer) Multiplier(MatrixOpGRPC_MultiplierServer) error {
	return status.Errorf(codes.Unimplemented, "method Multiplier not implemented")
}

func RegisterMatrixOpGRPCServer(s *grpc.Server, srv MatrixOpGRPCServer) {
	s.RegisterService(&_MatrixOpGRPC_serviceDesc, srv)
}

func _MatrixOpGRPC_Multiplier_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MatrixOpGRPCServer).Multiplier(&matrixOpGRPCMultiplierServer{stream})
}

type MatrixOpGRPC_MultiplierServer interface {
	Send(*LargeTransaction) error
	Recv() (*LargeTransaction, error)
	grpc.ServerStream
}

type matrixOpGRPCMultiplierServer struct {
	grpc.ServerStream
}

func (x *matrixOpGRPCMultiplierServer) Send(m *LargeTransaction) error {
	return x.ServerStream.SendMsg(m)
}

func (x *matrixOpGRPCMultiplierServer) Recv() (*LargeTransaction, error) {
	m := new(LargeTransaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MatrixOpGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MatrixOpGRPC",
	HandlerType: (*MatrixOpGRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Multiplier",
			Handler:       _MatrixOpGRPC_Multiplier_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transaction.proto",
}
